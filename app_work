import dash
import plotly.graph_objects as go
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from ibapi.contract import Contract
from fintech_ibkr import *
import pandas as pd
import time

import dash
import plotly.graph_objects as go
from dash.dependencies import Input, Output, State
from ibapi.contract import Contract
from ibapi.order import Order
from fintech_ibkr import *
from dash import dcc
from dash import html
import dash_daq as daq
from datetime import date

# Make a Dash app!
app = dash.Dash(__name__)

#server
server = app.server

# Define the layout.
app.layout = html.Div([
    html.Div(
        id='sync-connection-status',
        children='False',
        style={'display':'none'}
    ),
    # Section title
    html.H3("Section 1: Fetch & Display exchange rate historical data"),
    html.H4("Select value for whatToShow:"),
    html.Div(
        dcc.Dropdown(
            ["TRADES", "MIDPOINT", "BID", "ASK", "BID_ASK", "ADJUSTED_LAST",
             "HISTORICAL_VOLATILITY", "OPTION_IMPLIED_VOLATILITY", 'REBATE_RATE',
             'FEE_RATE', "YIELD_BID", "YIELD_ASK", 'YIELD_BID_ASK', 'YIELD_LAST',
             "SCHEDULE"],
            "MIDPOINT",
            id='what-to-show'
        ),
        style = {'width': '365px'}
    ),
    html.H4("Select value for endDateTime:"),
    html.Div(
        children = [
            html.P("You may select a specific endDateTime for the call to " + \
                   "fetch_historical_data. If any of the below is left empty, " + \
                   "the current present moment will be used.")
        ],
        style = {'width': '365px'}
    ),
    html.Div(
        children = [
            html.Div(
                children = [
                    html.Label('Date:'),
                    dcc.DatePickerSingle(id='edt-date')
                ],
                style = {
                    'display': 'inline-block',
                    'margin-right': '20px',
                }
            ),
            html.Div(
                children = [
                    html.Label('Hour:'),
                    dcc.Dropdown(list(range(24)), id='edt-hour'),
                ],
                style = {
                    'display': 'inline-block',
                    'padding-right': '5px'
                }
            ),
            html.Div(
                children = [
                    html.Label('Minute:'),
                    dcc.Dropdown(list(range(60)), id='edt-minute'),
                ],
                style = {
                    'display': 'inline-block',
                    'padding-right': '5px'
                }
            ),
            html.Div(
                children = [
                    html.Label('Second:'),
                    dcc.Dropdown(list(range(60)), id='edt-second'),
                ],
                style = {'display': 'inline-block'}
            )
        ]
    ),

    html.H4("Enter a currency pair:"),
    html.P(
        children=[
            "See the various currency pairs here: ",
            html.A(
                "currency pairs",
                href='https://www.interactivebrokers.com/en/index.php?f=2222&exch=ibfxpro&showcategories=FX'
            )
        ]
    ),
    # Currency pair text input, within its own div.
    html.Div(
        # The input object itself
        ["Input Currency: ", dcc.Input(
            id='currency-input', value='AUD.CAD', type='text'
        )],
        # Style it so that the submit button appears beside the input.
        style={'display': 'inline-block', 'padding-top': '5px'}
    ),
    # Submit button
    html.Button('Submit', id='submit-button', n_clicks=0),
    # Div for initial instructions and the updated info once submit is pressed
    html.Div(
        id='currency-output',
        children='Enter a currency code and press submit'),
],
    style={'width': '405px', 'display': 'inline-block'}
),
html.Div([
    html.Div([
        html.Div([
            html.H4(
                'Hostname: ',
                style={'display': 'inline-block', 'margin-right': 20}
            ),
            dcc.Input(
                id='host',
                value='127.0.0.1',
                type='text',
                style={'display': 'inline-block'}
            )],
            style={'display': 'inline-block'}
        ),
        html.Div([
            html.H4(
                'Port: ',
                style={'display': 'inline-block', 'margin-right': 59}
            ),
            dcc.Input(
                id='port',
                value='7497',
                type='text',
                style={'display': 'inline-block'}
            )],
            style={'display': 'inline-block'}
        ),
        html.Div([
            html.H4(
                'Client ID: ',
                style={'display': 'inline-block', 'margin-right': 27}
            ),
            dcc.Input(
                id='clientid',
                value='10645',
                type='text',
                style={'display': 'inline-block'}
            )
        ],
            style={'display': 'inline-block'}
        )
    ]
    ),
    html.Br(),
    html.Button('TEST SYNC CONNECTION', id='connect-button', n_clicks=0),
    html.Div(id='connect-indicator'),
    html.Div(id='contract-details')
],
    style={'width': '405px', 'display': 'inline-block',
           'vertical-align': 'top', 'padding-left': '15px'}
),
html.Br(),
# Div to hold the initial instructions and the updated info once submit is pressed
html.Div(id='currency-output', children='Enter a currency code and press submit'),
# Div to hold the candlestick graph
#html.Div([dcc.Graph(id='candlestick-graph')]),
dcc.Loading(
    id="loading-1",
    type="default",
    children=html.Div([dcc.Graph(id='candlestick-graph')])
),
# Another line break
html.Br(),
# Section title
html.H6("Make a Trade"),
# Div to confirm what trade was made
html.Div(id='trade-output'),
# Radio items to select buy or sell
dcc.RadioItems(
    id='buy-or-sell',
    options=[
            {'label': 'BUY', 'value': 'BUY'},
            {'label': 'SELL', 'value': 'SELL'}
    ],
    value='BUY'
),
# Text input for the currency pair to be traded
dcc.Input(id='trade-currency', value='AUDCAD', type='text'),
# Numeric input for the trade amount
dcc.Input(id='trade-amt', value='20000', type='number'),
    # Submit button for the trade
html.Button('Trade', id='trade-button', n_clicks=0)

])